import { db } from './firebase';
import { setDoc, onSnapshot, doc, collection, updateDoc, deleteDoc, getDoc, getDocs, writeBatch, serverTimestamp, addDoc } from 'firebase/firestore';

class FirebaseUtil {
  static async uploadAnyModel(path, model) {
    try {
      // Validate path
      if (!path || typeof path !== 'string') {
        throw new Error('Invalid path');
      }

      console.log(`[FIREBASE] Attempting to upload to collection: ${path}`);
      
      // Simplify: Just use addDoc for automatic ID generation
      // This avoids potential issues with custom IDs and path parsing
      try {
        // Create a clean copy of the model without undefined values
        const cleanModel = {};
        Object.keys(model).forEach(key => {
          if (model[key] !== undefined && model[key] !== null) {
            cleanModel[key] = model[key];
          }
        });
        
        // Use 'createdAt' to match the Android app's data model
        cleanModel.createdAt = new Date(); // Firestore SDK handles Date objects correctly
        
        const collectionRef = collection(db, path);
        const docRef = await addDoc(collectionRef, cleanModel);
        
        console.log(`[FIREBASE] Document written with ID: ${docRef.id}`);
        return { state: 'success', id: docRef.id };
      } catch (innerError) {
        // Try alternative approach with setDoc if addDoc fails
        console.error(`[FIREBASE] addDoc failed: ${innerError.message}. Trying setDoc...`);
        
        const timestamp = Date.now();
        const docId = `doc_${timestamp}`;
        const docRef = doc(db, path, docId);
        
        // Remove serverTimestamp which might cause issues
        const simplifiedModel = { ...model, timestamp: timestamp };
        delete simplifiedModel.createdAt;
        
        await setDoc(docRef, simplifiedModel);
        return { state: 'success', id: docId };
      }
    } catch (error) {
      console.error(`[FIREBASE] Upload error: ${error.code || 'unknown'} - ${error.message}`);
      if (error.code === 'permission-denied') {
        return { 
          state: 'error', 
          error: 'Permission denied. Check Firestore security rules.', 
          details: error.message,
          code: error.code 
        };
      }
      return { 
        state: 'error', 
        error: error.message, 
        code: error.code || 'unknown-error',
        stack: error.stack
      };
    }
  }

  static async updateDocument(collection, docId, data) {
    try {
      // Validate inputs
      if (!collection || typeof collection !== 'string') {
        throw new Error('Invalid collection path');
      }
      
      if (!docId || typeof docId !== 'string') {
        throw new Error('Invalid document ID');
      }

      // Reference to the document
      const docRef = doc(db, collection, docId);
      
      // Update the document
      await updateDoc(docRef, data);
      
      return { state: 'success', message: 'Document updated successfully' };
    } catch (error) {
      console.error("Error updating document:", error);
      return { state: 'error', error: error.message };
    }
  }

  static async updateAnyModel(path, documentId, updatedData) {
    try {
      // Validate inputs
      if(documentId == ""){
        return { state: 'error', error: "documentId is empty or not provided as second parameter" };
      }
      if (!path || typeof path !== 'string') {
        throw new Error('Invalid path');
      }
      if (!documentId || typeof documentId !== 'string') {
        throw new Error('Invalid document ID');
      }

      // Create a document reference
      const documentRef = doc(db, path, documentId);

      // Check if the updatedData object contains only one property (field) to update
      if (Object.keys(updatedData).length === 1) {
        // If it's a single field update, handle it normally
        const [field, value] = Object.entries(updatedData)[0];
        const singleFieldUpdate = { [field]: value };

        
        // Update the single field in the document
        await updateDoc(documentRef, singleFieldUpdate);
      } else {
        // Otherwise, handle the case where multiple fields are being updated
        await updateDoc(documentRef, updatedData);
      }

      return { state: 'success', message: 'Document updated successfully' };
    } catch (error) {
      return { state: 'error', error: error.message };
    }
  }

  static async testFirestoreAccess(collectionPath = 'axisbank') {
    try {
      console.log(`[FIREBASE] Testing read access to collection: ${collectionPath}`);
      const collectionRef = collection(db, collectionPath);
      
      // Try to get documents from the collection
      const querySnapshot = await getDocs(collectionRef);
      
      // Log success and document count
      console.log(`[FIREBASE] Successfully read from collection. Found ${querySnapshot.size} documents.`);
      
      // Get the first few document IDs for verification
      const docIds = [];
      querySnapshot.forEach(doc => {
        if (docIds.length < 5) { // Limit to 5 documents
          docIds.push(doc.id);
        }
      });
      
      return { 
        state: 'success', 
        message: `Read access successful. Found ${querySnapshot.size} documents.`,
        documentCount: querySnapshot.size,
        sampleDocIds: docIds
      };
    } catch (error) {
      console.error(`[FIREBASE] Read access test failed: ${error.code || 'unknown'} - ${error.message}`);
      return { 
        state: 'error', 
        error: error.message,
        code: error.code || 'unknown-error',
        stack: error.stack
      };
    }
  }

  static async deleteModel(path) {
    try {
      // Validate the path
      if (!path || typeof path !== 'string') {
        throw new Error('Invalid path');
      }
  
      // Split the path by slashes to analyze its segments
      const pathSegments = path.split('/');
  
      // Case 1: If the path has an even number of segments, it's a document reference
      if (pathSegments.length % 2 === 0) {
        const documentRef = doc(db, path); // Create a document reference
        await deleteDoc(documentRef);
        return { state: 'success', message: 'Document deleted successfully' };
      }
  
      // Case 2: If the path has an odd number of segments, it's a collection reference
      else {
        const collectionRef = collection(db, path); // Create a collection reference
  
        // Use the deleteCollection method to delete the collection
        await this.deleteCollection(collectionRef);
        return { state: 'success', message: 'Collection deleted successfully' };
      }
    } catch (error) {
      return { state: 'error', error: error.message };
    }
  }
  
  // Helper method to delete a collection
  static async deleteCollection(collectionRef) {
    const querySnapshot = await getDocs(collectionRef);
    const batch = writeBatch(db);
  
    querySnapshot.forEach((doc) => {
      batch.delete(doc.ref);
    });
  
    await batch.commit();
  }

  static async getDocument(path, documentId) {
    try {
      // Validate inputs
      if (!path || typeof path !== 'string') {
        throw new Error('Invalid path');
      }
      if (!documentId || typeof documentId !== 'string') {
        throw new Error('Invalid document ID');
      }
  
      // Create a document reference
      const documentRef = doc(db, path, documentId);
  
      // Get the document snapshot
      const documentSnapshot = await getDoc(documentRef);
  
      // Return the document data
      if (documentSnapshot.exists()) {
        return documentSnapshot.data();
      } else {
        return null;
      }
    } catch (error) {
      console.error(error);
      return null;
    }
  }


static collectAnyModels(path) {
  try {
    // Validate path
    if (!path || typeof path !== 'string') {
      throw new Error('Invalid path');
    }

    // Split the path into segments
    const pathSegments = path.split('/');

    let ref;
    if (pathSegments.length % 2 === 0) {
      // Even segments: Treat as a document path
      const documentId = pathSegments.pop(); // Extract last segment as document ID
      const parentPath = pathSegments.join('/'); // Get parent collection path
      ref = doc(db, parentPath, documentId); // Create document reference
    } else {
      // Odd segments: Treat as a collection path
      ref = collection(db, path); // Create collection reference
    }

    // Return a live collection of models
    return onSnapshot(ref, (snapshot) => {
      if (snapshot.exists()) {
        // For documents
        return snapshot.data();
      } else {
        // For collections
        return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      }
    });
  } catch (error) {
    console.error(error);
    return [];
  }
}
}
export default FirebaseUtil;
